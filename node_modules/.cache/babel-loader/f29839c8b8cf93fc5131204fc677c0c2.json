{"ast":null,"code":"import _classCallCheck from \"/Users/mohamedmaqil/webprojects/react-map/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mohamedmaqil/webprojects/react-map/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mohamedmaqil/webprojects/react-map/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mohamedmaqil/webprojects/react-map/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mohamedmaqil/webprojects/react-map/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _toConsumableArray from \"/Users/mohamedmaqil/webprojects/react-map/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/mohamedmaqil/webprojects/react-map/src/simple-react-map.js\";\nimport React from \"react\";\nimport { ComposableMap, ZoomableGroup, Geographies, Geography, Markers, Marker } from \"react-simple-maps\";\nvar GEOGRAPHY = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/examples/simple-markers/static/world-50m.json\";\nvar wrapperStyles = {\n  width: \"100%\",\n  maxWidth: 980,\n  margin: \"0 auto\"\n};\nvar cities = [{\n  name: \"SG\",\n  latitude: 1.3521,\n  longitude: 103.8198,\n  color: \"red\"\n}, {\n  name: \"KL\",\n  latitude: 3.139,\n  longitude: 101.6869,\n  color: \"blue\"\n}];\nvar center = {\n  latitude: (Math.min.apply(Math, _toConsumableArray(cities.map(function (c) {\n    return c.latitude;\n  }))) + Math.max.apply(Math, _toConsumableArray(cities.map(function (c) {\n    return c.latitude;\n  })))) / 2,\n  longitude: (Math.min.apply(Math, _toConsumableArray(cities.map(function (c) {\n    return c.longitude;\n  }))) + Math.max.apply(Math, _toConsumableArray(cities.map(function (c) {\n    return c.longitude;\n  })))) / 2\n};\n\nvar SimpleReactApp =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SimpleReactApp, _React$Component);\n\n  function SimpleReactApp() {\n    _classCallCheck(this, SimpleReactApp);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SimpleReactApp).apply(this, arguments));\n  }\n\n  _createClass(SimpleReactApp, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        style: wrapperStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(ComposableMap, {\n        projectionConfig: {\n          scale: 9000\n        },\n        width: 1000,\n        height: 800,\n        style: {\n          width: \"100%\",\n          height: \"auto\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(ZoomableGroup, {\n        center: [center.longitude, center.latitude],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(Geographies, {\n        geography: GEOGRAPHY,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, function (geographies, projection) {\n        return geographies.map(function (geography, i) {\n          return React.createElement(Geography, {\n            key: i,\n            geography: geography,\n            projection: projection,\n            style: {\n              default: {\n                fill: \"#ECEFF1\",\n                stroke: \"#607D8B\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              },\n              hover: {\n                fill: \"#ECEFF1\",\n                stroke: \"#607D8B\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              },\n              pressed: {\n                fill: \"#ECEFF1\",\n                stroke: \"#607D8B\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              }\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63\n            },\n            __self: this\n          });\n        });\n      }), React.createElement(Markers, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, cities.map(function (city, i) {\n        return React.createElement(Marker, {\n          key: i,\n          marker: {\n            coordinates: [city.longitude, city.latitude]\n          },\n          style: {\n            default: {\n              fill: city.color\n            },\n            hover: {\n              fill: city.color\n            },\n            pressed: {\n              fill: city.color\n            }\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, React.createElement(\"circle\", {\n          cx: 0,\n          cy: 0,\n          r: 10,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }));\n      })))));\n    }\n  }]);\n\n  return SimpleReactApp;\n}(React.Component);\n\nexport default SimpleReactApp;","map":{"version":3,"sources":["/Users/mohamedmaqil/webprojects/react-map/src/simple-react-map.js"],"names":["React","ComposableMap","ZoomableGroup","Geographies","Geography","Markers","Marker","GEOGRAPHY","wrapperStyles","width","maxWidth","margin","cities","name","latitude","longitude","color","center","Math","min","map","c","max","SimpleReactApp","scale","height","geographies","projection","geography","i","default","fill","stroke","strokeWidth","outline","hover","pressed","city","coordinates","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n  Markers,\n  Marker,\n} from \"react-simple-maps\";\n\nconst GEOGRAPHY =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/examples/simple-markers/static/world-50m.json\";\n\nconst wrapperStyles = {\n  width: \"100%\",\n  maxWidth: 980,\n  margin: \"0 auto\",\n};\n\nconst cities = [\n  {\n    name: \"SG\",\n    latitude: 1.3521,\n    longitude: 103.8198,\n    color: \"red\",\n  },\n  {\n    name: \"KL\",\n    latitude: 3.139,\n    longitude: 101.6869,\n    color: \"blue\",\n  },\n];\n\nconst center = {\n  latitude:\n    (Math.min(...cities.map(c => c.latitude)) +\n      Math.max(...cities.map(c => c.latitude))) /\n    2,\n  longitude:\n    (Math.min(...cities.map(c => c.longitude)) +\n      Math.max(...cities.map(c => c.longitude))) /\n    2,\n};\n\nclass SimpleReactApp extends React.Component {\n  render() {\n    return (\n      <div style={wrapperStyles}>\n        <ComposableMap\n          projectionConfig={{ scale: 9000 }}\n          width={1000}\n          height={800}\n          style={{\n            width: \"100%\",\n            height: \"auto\",\n          }}\n        >\n          <ZoomableGroup center={[center.longitude, center.latitude]}>\n            <Geographies geography={GEOGRAPHY}>\n              {(geographies, projection) =>\n                geographies.map((geography, i) => (\n                  <Geography\n                    key={i}\n                    geography={geography}\n                    projection={projection}\n                    style={{\n                      default: {\n                        fill: \"#ECEFF1\",\n                        stroke: \"#607D8B\",\n                        strokeWidth: 0.75,\n                        outline: \"none\",\n                      },\n                      hover: {\n                        fill: \"#ECEFF1\",\n                        stroke: \"#607D8B\",\n                        strokeWidth: 0.75,\n                        outline: \"none\",\n                      },\n                      pressed: {\n                        fill: \"#ECEFF1\",\n                        stroke: \"#607D8B\",\n                        strokeWidth: 0.75,\n                        outline: \"none\",\n                      },\n                    }}\n                  />\n                ))\n              }\n            </Geographies>\n            <Markers>\n              {cities.map((city, i) => (\n                <Marker\n                  key={i}\n                  marker={{ coordinates: [city.longitude, city.latitude] }}\n                  style={{\n                    default: { fill: city.color },\n                    hover: { fill: city.color },\n                    pressed: { fill: city.color },\n                  }}\n                >\n                  <circle cx={0} cy={0} r={10} />\n                </Marker>\n              ))}\n            </Markers>\n          </ZoomableGroup>\n        </ComposableMap>\n      </div>\n    );\n  }\n}\n\nexport default SimpleReactApp;\n"]},"metadata":{},"sourceType":"module"}